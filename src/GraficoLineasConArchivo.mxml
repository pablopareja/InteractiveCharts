<?xml version="1.0" encoding="utf-8"?>
<!-- wrapper/ApplicationParameters.mxml -->
<s:Application 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:mx="library://ns.adobe.com/flex/mx" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	creationComplete="loadVars()"
	width="100%"
	height="100%">
	<s:layout> 
		<s:HorizontalLayout/> 
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.charts.CategoryAxis;
			import mx.charts.Legend;
			import mx.charts.LineChart;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.Label;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			
			import spark.components.HGroup;
			
			
			[Bindable]
			private var showDataTips:Boolean = true;
			[Bindable]
			private var showLegend:Boolean = true;
			[Bindable]
			private var showCheckboxes:Boolean = true;
			[Bindable]
			private var showSelectAllButton:Boolean = true;
			[Bindable]
			private var showDeselectAllButton:Boolean = true;
			private var fileName:String;
			private var numberOfSeries:int
			private var seriesForm:String;
			private var colorPalette:String;
			
			[Bindable]
			private var arrayCollection:ArrayCollection = null;
			
			private var legendColorCanvasArray:Array = new Array();
			
			
			private function loadVars():void{
				var file:String = "vars.txt";		
				//reading data file
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, onVarsLoaded);
				loader.load(new URLRequest(file));
			}
			
			private function onVarsLoaded(event:Event):void{				
				
				var dataSt:String = String(event.currentTarget.data);				
				var varsArray:Array = dataSt.split(',');
				
				for(var i:int=0; i<varsArray.length; i++){
					var vals:Array = varsArray[i].split('=');
					
					if(vals[0] == "show_legend"){
						showLegend = (vals[1] == "true");
					}else if(vals[0] == "show_data_tips"){
						showDataTips = (vals[1] == "true");
					}else if(vals[0] == "show_select_all_butto"){
						showSelectAllButton = (vals[1] == "true");
					}else if(vals[0] == "show_deselect_all_button"){
						showDeselectAllButton = (vals[1] == "true");
					}else if(vals[0] == "number_of_series"){
						numberOfSeries = vals[1];
					}else if(vals[0] == "show_checkboxes"){
						showCheckboxes = (vals[1] == "true");
					}else if(vals[0] == "color_palette"){
						colorPalette = vals[1];
					}else if(vals[0] == "file_name"){
						fileName = vals[1];
					}else if(vals[0] == "series_form"){
						seriesForm = vals[1];
					}
				}
				
				init();
				
			}
			
			
			/* Assign values to new properties. */
			private function init():void {
				
				//reading data file
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, onDataLoaded);
				loader.load(new URLRequest(fileName));
								
			}
						
			
			private function onDataLoaded(event:Event):void{
				
				
				var dataSt:String = String(event.currentTarget.data);
				
				
				
				var linesArray:Array = dataSt.split("\n");
				
				var firstLine:String = linesArray[0];
				var firstLineColumns:Array = firstLine.split("\t");		
				
				
				var lineSeriesArray:Array = new Array();
				
				//creating line series
				for(var i:int=1; i<firstLineColumns.length;i++){			
					
					var lineSeries:LineSeries = new LineSeries();
					lineSeries.yField = ("series" + i);
					lineSeries.displayName = firstLineColumns[i];
					lineSeries.setStyle("form", seriesForm);					
					lineSeriesArray.push(lineSeries);					
				}
				
				lineChart.series = lineSeriesArray;
				
				arrayCollection = new ArrayCollection();
				//var superArray:Array = new Array();
				
				//--filling data provider----
				for(i=1; i<linesArray.length; i++){
					
					var currentLine:String = linesArray[i];					
					var currentLineColumns:Array = currentLine.split("\t");
					
					if(currentLineColumns.length > 0){
						//category field value
						var object:Object = new Object();
						object["categoryfield"] = currentLineColumns[0];
						
						for(var j:int = 1; j <= numberOfSeries; j++){
							object[("series" + j)] = currentLineColumns[j];						
						}
						
						arrayCollection.addItem(object);
					}													
					
				}
				
				var categoryAxis:CategoryAxis = new CategoryAxis();
				categoryAxis.categoryField = "categoryfield";
				categoryAxis.dataProvider = arrayCollection;
				lineChart.horizontalAxis = categoryAxis;
				
				
				
				if(showCheckboxes){
					for(i=0;i < lineChart.series.length; i++){
						var lSeries:LineSeries = lineChart.series[i];
						var checkbox:CheckBox = new CheckBox();
						checkbox.label = lSeries.displayName;
						checkbox.selected = true;
						checkbox.addEventListener(FlexEvent.UPDATE_COMPLETE,onSeriesCheckBoxChange);
						checkboxesComponent.addElement(checkbox);
					}
				}
				
				if(showLegend){				
					for(i=0; i<firstLineColumns.length;i++){						
						
						var legendHGroup:HGroup = new HGroup();		
						var seriesLabel:Label = new Label();
						seriesLabel.text = firstLineColumns[i+1];
						var colorCanvas:Canvas = new Canvas();
						colorCanvas.width = 15;
						colorCanvas.height = 20;					
						legendColorCanvasArray.push(colorCanvas);
						legendHGroup.addElement(colorCanvas);
						legendHGroup.addElement(seriesLabel);
						legendVGroup.addElement(legendHGroup);
						
					}				
				}
				
				if(colorPalette != null){
					var loader:URLLoader = new URLLoader();
					loader.addEventListener(Event.COMPLETE, onColorPaletteLoaded);
					loader.load(new URLRequest(colorPalette));
				}else{
					lineChart.visible = true;
					if(showLegend){
						callLater(updateLegendColors);
					}
				}	
				
				
			}
			
			private function updateLegendColors():void{
				for(var i:int=0;i<lineChart.series.length;i++){
					var lineSeries:LineSeries = lineChart.series[i];
					var stroke:SolidColorStroke = null;
					if(colorPalette != null){
						stroke = lineSeries.getStyle("lineStroke") as SolidColorStroke;
					}else{
						stroke = lineSeries.getStyle("stroke") as SolidColorStroke;
					}				
					//Alert.show(""+stroke);
					legendColorCanvasArray[i].setStyle("backgroundColor", "#" + stroke.color.toString(16));	
					
				}
				
			}
			
			private function onColorPaletteLoaded(event:Event):void{
				var dataSt:String = String(event.currentTarget.data);
				var lines:Array = dataSt.split("\n");
				
				for(var i:int=0;i<lineChart.series.length;i++){
					var lineSeries:LineSeries = lineChart.series[i];
					
					var stroke:SolidColorStroke = new SolidColorStroke(parseInt(lines[i],16),3);
					
					lineSeries.setStyle("lineStroke", stroke);	
					
					
				}
								
				lineChart.visible = true;
				if(showLegend){
					callLater(updateLegendColors);
				}
				
			}
			
			private function onSeriesCheckBoxChange(event:FlexEvent):void{
				var tempCheckBox:CheckBox = event.currentTarget as CheckBox;
				for(var i:int=0;i < lineChart.series.length; i++){
					var lSeries:LineSeries = lineChart.series[i];
					if(lSeries.displayName == tempCheckBox.label){
						lSeries.visible = tempCheckBox.selected;
					}
				}
				
			}
			
			private function selectAllCheckboxes(selectedValue:Boolean):void{
				for(var i:int=0; i<checkboxesComponent.numChildren; i++){
					var obj:DisplayObject = checkboxesComponent.getChildAt(i);
					if(obj is CheckBox){
						(obj as CheckBox).selected = selectedValue;
					}
				}
			}				
			
		]]></fx:Script>
	<s:VGroup width="100%" 
			  height="100%" 
			  id="vGroup"> 
		<mx:LineChart id="lineChart" 
					  width="100%" 
					  height="100%" 
					  visible="false"
					  showDataTips="{showDataTips}"
					  dataProvider="{arrayCollection}"
					  >
		</mx:LineChart>
		<s:VGroup id="legendVGroup">			
		</s:VGroup>
	</s:VGroup>
	<s:VGroup id="checkboxesComponent" 
			  visible="{showCheckboxes}">	
		<s:Button label="Select all" 
				  click="selectAllCheckboxes(true)"
				  visible="{showSelectAllButton}"/>
		<s:Button label="Deselect all" 
				  click="selectAllCheckboxes(false)"
				  visible="{showDeselectAllButton}"/>
	</s:VGroup>
</s:Application>